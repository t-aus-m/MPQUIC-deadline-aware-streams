



QUIC                                                             T. John
Internet-Draft                                               T. Riechard
Intended status: Informational    Otto-von-Guericke University Magdeburg
Expires: 22 August 2025                                 18 February 2025


                   Deadline Aware Streams in MP-QUIC
         draft-tjohn-quic-mpquic-deadline-aware-streams-latest

Abstract

   This document proposes the Deadline-aware Multipath Transport
   Protocol (DMTP) as an extension to the Multipath Extension of QUIC.
   DMTP leverages multiple paths along adaptive Forward Error Correction
   (FEC) and smart retransmissions to support real-time applications
   with strict latency requirements.  With this it fills in a niche with
   increasing demand, that existing multipath protocols fall short on.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at https://t-aus-
   m.github.io/MPQUIC-deadline-aware-streams/draft-tjohn-quic-mpquic-
   deadline-aware-streams.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-tjohn-quic-
   mpquic-deadline-aware-streams/.

   Discussion of this document takes place on the QUIC mailing list
   (mailto:quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/quic/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/quic/.

   Source for this draft and an issue tracker can be found at
   https://github.com/t-aus-m/MPQUIC-deadline-aware-streams.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 22 August 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Design of DMTP
     3.1.  Custom Scheduler and Congestion Controller for
           Deadline-Aware Streams
     3.2.  Deadlines
       3.2.1.  Signalling Deadlines
       3.2.2.  Deadline Semantics
       3.2.3.  Handling Missed Deadline
     3.3.  Adaptive Forward Error Correction (FEC)
     3.4.  Smart Retransmissions
     3.5.  Path Metrics
       3.5.1.  Per Path Delay
       3.5.2.  Per Path Loss Rate
   4.  Extension of Multipath Extension of QUIC
     4.1.  Handshake Negotiation and Transport Parameter
     4.2.  DEADLINE_CONTROL Frame
     4.3.  DMTP_ACK Frame
   5.  API
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Multipath Extension of QUIC [MP-QUIC] enhances performance by
   utilizing multiple paths simultaneously, but it currently lacks
   mechanisms to guarantee data delivery within specific timeframes.
   Given the increasing demand for real-time applications such as
   teleoperation, live video streaming, and online gaming there's a
   growing need for transport protocols that can efficiently handle
   strict latency requirements.  Introducing DMTP to [MP-QUIC] could
   enable applications to meet those stringent latency constraints,
   optimizing for low-latency and high-reliability scenarios.

   While the implementation of DMTP with implementation-specific APIs
   would be possible, that approach would likely lack endpoint
   coordination, because deadlines would not be communicated between
   different implementations and/or endpoints through the protocol.  By
   introducing a transport parameter (see Section 4.1) and a custom
   frame (see Section 4.2), endpoints can negotiate support and exchange
   deadline information directly within the protocol, enabling
   coordinated scheduling decisions at the transport layer.
   Standardizing this mechanism avoids the limitations of
   implementation-specific solutions, promoting wider adoption and
   interoperability of DMTP across different implementations of
   [MP-QUIC].

   This draft is based on a conference paper proposing [DMTP].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Design of DMTP

3.1.  Custom Scheduler and Congestion Controller for Deadline-Aware
      Streams

   Implementations that support deadline-aware streams SHOULD provide a
   custom scheduler and congestion controller that prioritize packets
   based on their deadlines.  This includes:

   *  Path Selection: Dynamically selecting paths that are most likely
      to meet the deadlines based on real-time metrics like latency,
      bandwidth, and packet loss.

   *  Packet Prioritization: Prioritizing packets from streams with
      earlier deadlines.

   *  Adaptive Retransmissions: Deciding whether to retransmit lost
      packets based on their remaining time before the deadline.

   *  Forward Error Correction (FEC): Optionally integrating FEC
      mechanisms to reduce the need for retransmissions in networks with
      random losses.

   *  Deadline Miss Handling: Informing the application when a deadline
      cannot be met, allowing it to take appropriate action.

3.2.  Deadlines

3.2.1.  Signalling Deadlines

   To signal deadlines, endpoints use the DEADLINE_CONTROL frame (see
   Section 4.2).  This frame associates a specific deadline with a
   stream, indicating the relative time by which the data should be
   delivered.

3.2.2.  Deadline Semantics

   *  Deadline Representation: Deadlines are represented as a relative
      time in milliseconds from the time the frame is sent.

   *  Stream Association: A deadline applies to a specific stream
      identified by its Stream ID

   *  Transport Behavior: Upon receiving a DEADLINE_CONTROL frame, the
      transport layer SHOULD attempt to schedule and retransmit packets
      carrying data for the specified stream to meet the indicated
      deadline.

   *  Retransmissions and Scheduling: Endpoints MAY implement custom
      schedulers and congestion controllers optimized for deadline-aware
      traffic, such as those based on DMTP concepts.

3.2.3.  Handling Missed Deadline

   If the transport layer determines that the deadline cannot be met, it
   MAY choose to:

   *  Discard the data associated with the deadline-aware stream.

   *  Inform the application of the missed deadline.

   *  Continue delivering the data if it is still deemed useful.

   The specific behavior is implementation-specific and MAY be
   configurable by the application.

3.3.  Adaptive Forward Error Correction (FEC)

   DMTP optionally uses Adaptive FEC as proposed in [QUIC-AFEC] to
   reduce the need for retransmissions in networks with random losses.
   When using [QUIC-AFEC], the Tag Type of the FEC_Tag MUST be set to 1
   in order for the FEC to work in a [MP-QUIC] and DMTP environment.
   This indicates Long Flow Usage which in turn implies that both source
   symbol packets and repair symbol packets MUST contain the FEC_Tag
   frame, which is necessary for matching repair symbol packets to their
   respective source symbol packets after sending them via different
   paths.  FEC Packets SHOULD be sent via another path then the source
   data, it is however RECOMMENDED to send the FEC data via the
   retransmission path.  The coding rate is chosen on a per-stream
   basis.

3.4.  Smart Retransmissions

   //: # TODO: Describe the goal and design of smart retransmissions
   briefly

3.5.  Path Metrics

   //: # TODO: Describe, which path metrics are necessary for DMTP to
   work and how they will be gathered

3.5.1.  Per Path Delay

   A crucial metric for DMTP to work is the one way delay of each path,
   as this determines the suitability of that path for reaching the
   deadline requirement.  DMTP is designed to be able to retrieve this
   metric from a path-aware network like [SCION] directly.  However, if
   such an underlying network is not present, DMTP is also able to
   measure the per path delay itself.  For this to work effectively,
   endpoints SHOULD use clock synchronization while communication via
   DMTP to ensure accuracy of the delay measurements.  This proposal
   adds a new frame type (see Section 4.3) to determine the per path
   delays.  Since acknowledgments should be sent back to the sender via
   a path that is different from the receive path, per path delays have
   to be probed separately.  For this, PING frames are sent regularly
   via each individual active path.

3.5.2.  Per Path Loss Rate

   //: # TODO: Describe how loss rate is determined

4.  Extension of Multipath Extension of QUIC

   This extension is based on and aims to extend [MP-QUIC].  The
   contents of this extension will be specified in this section.

4.1.  Handshake Negotiation and Transport Parameter

   This extension defines a new transport parameter, used to negotiate
   the use of deadline-aware streams during the connection handshake, as
   specified in [QUIC].  The new transport parameter is defined as
   follows:

   *  enable_deadline_aware_streams (value TBD): A zero-length value
      that, if present, indicates that the endpoint supports deadline-
      aware streams.

   Endpoints negotiate the use of deadline-aware streams by including
   the enable_deadline_aware_streams transport parameter in the
   handshake.  Both endpoints MUST include this transport parameter to
   enable the use of deadline-aware streams.  If an endpoint receives a
   DEADLINE_CONTROL frame without having negotiated support, it MUST
   treat this as a connection error of type PROTOCOL_VIOLATION

4.2.  DEADLINE_CONTROL Frame

   The DEADLINE_CONTROL frame (type=TBD) is used to signal deadline-
   awareness for specific streams and to indicate their associated
   deadlines.

     DEADLINE_CONTROL Frame {
       Type (i) = TBD,
       Stream ID (i),
       Deadline (i),
     }

   The DEADLINE_CONTROL frame contains the following fields:

   Stream ID:  A variable-length integer indicating the Stream ID to
      which the deadline applies.

   Deadline:  A variable-length integer representing the relative
      deadline in milliseconds from the time the frame is sent.  An
      endpoint sends a DEADLINE_CONTROL frame to indicate that data on
      the specified stream should be delivered by the given deadline.
      Upon receiving this frame, the peer MUST attempt to schedule and
      deliver the data on the specified stream within the indicated
      deadline.

   Usage Constraints:

   *  Endpoints MUST NOT send the DEADLINE_CONTROL frame unless both
      endpoints have negotiated support via the
      enable_deadline_aware_streams transport parameter.

   *  If an endpoint receives a DEADLINE_CONTROL frame without having
      negotiated support, it MUST treat it as a connection error of type
      PROTOCOL_VIOLATION.

   *  The DEADLINE_CONTROL frame MUST only be sent in 1-RTT packets.

4.3.  DMTP_ACK Frame

   The DMTP_ACK frame (type=TBD) is used to acknowledge the reception of
   a packet and feedback the reception time to the sender.  If the
   received frame contains a PING (type=0x01) frame, the DMTP_ACK frame
   MUST be sent back on the same path that it was received at.  The
   DMTP_ACK Frame contains the same information as a [QUIC] ACK frame,
   but adds a timestamp to it, in order to communicate if a packet has
   met its deadline or not.

   When using deadline-awareness the receiver SHOULD acknowledge each
   packet separately.

     DMTP_ACK Frame {
      Type (i) = TBD,
      Largest Acknowledged (i),
      ACK Delay (i),
      ACK Range Count (i),
      First ACK Range (i),
      ACK Range (..) ...,
      [ECN Counts (..)],
      Timestamp (i),
     }

   The DMTP_ACK frame adds the Timestamp field to the [QUIC] ACK frame.
   It MUST be formatted according to [RFC3339] with a resolution down to
   the nanosecond, i.e. with 9 digits after the decimal point.  If an
   endpoint uses a clock with a lower resolution, the remaining digits
   SHOULD be padded with zeros.

5.  API

   //: # TODO: Define API

6.  Security Considerations

   This extension retains all the security features and considerations
   of [QUIC], [QUIC-TLS] and [MP-QUIC]. //: # TODO: Add DMTP specific
   Security Considerations

7.  IANA Considerations

   This document defines a new transport parameter for the negotiation
   of enable multiple paths for QUIC, and three new frame types.  The
   draft defines provisional values for experiments, but we expect IANA
   to allocate short values if the draft is approved.

   The following entry in Table 1 should be added to the "QUIC Transport
   Parameters" registry under the "QUIC Protocol" heading.

         +=======+===============================+===============+
         | Value | Parameter Name.               | Specification |
         +=======+===============================+===============+
         | TBD   | enable_deadline_aware_streams | Section 4.1   |
         +-------+-------------------------------+---------------+

           Table 1: Addition to QUIC Transport Parameters Entries

   The following frame type defined in Table 2 should be added to the
   "QUIC Frame Types" registry under the "QUIC Protocol" heading.

               +=======+==================+===============+
               | Value | Frame Name       | Specification |
               +=======+==================+===============+
               | TBD   | DEADLINE_CONTROL | Section 4.2   |
               +-------+------------------+---------------+
               | TBD   | DMTP_ACK         | Section 4.3   |
               +-------+------------------+---------------+

                  Table 2: Addition to QUIC Frame Types
                                 Entries

8.  References

8.1.  Normative References

   [MP-QUIC]  Liu, Y., Ma, Y., De Coninck, Q., Bonaventure, O., Huitema,
              C., and M. Kühlewind, "Multipath Extension for QUIC", Work
              in Progress, Internet-Draft, draft-ietf-quic-multipath-12,
              22 January 2025, <https://datatracker.ietf.org/doc/html/
              draft-ietf-quic-multipath-12>.

   [QUIC]     Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [QUIC-AFEC]
              Moskvitin, D., Onegin, E., Huang, R., Luo, H., and Q.
              Chen, "Adaptive Forward Erasure Correction for Delay-
              Sensitive QUIC Connections", Work in Progress, Internet-
              Draft, draft-dmoskvitin-quic-adaptive-fec-00, 6 May 2024,
              <https://datatracker.ietf.org/doc/html/draft-dmoskvitin-
              quic-adaptive-fec-00>.

   [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., "Using TLS to Secure
              QUIC", RFC 9001, DOI 10.17487/RFC9001, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9001>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <https://www.rfc-editor.org/rfc/rfc3339>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

8.2.  Informative References

   [DMTP]     John, T., Perrig, A., and D. Hausheer, "DMTP: Deadline-
              aware Multipath Transport Protocol", IEEE, 2023 IFIP
              Networking Conference (IFIP Networking),
              DOI 10.23919/ifipnetworking57963.2023.10186417, June 2023,
              <https://doi.org/10.23919/
              ifipnetworking57963.2023.10186417>.

   [SCION]    Chuat, L., Legner, M., Basin, D., Hausheer, D., Hitz, S.,
              Müller, P., and A. Perrig, "The Complete Guide to SCION:
              From Design Principles to Formal Verification", Springer
              International Publishing, Information Security
              and Cryptography, DOI 10.1007/978-3-031-05288-0,
              ISBN ["9783031052873", "9783031052880"], 2022,
              <https://doi.org/10.1007/978-3-031-05288-0>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Tony John
   Otto-von-Guericke University Magdeburg
   Email: tony.john@ovgu.de


   Till-Frederik Riechard
   Otto-von-Guericke University Magdeburg
   Email: riechard@ovgu.de
