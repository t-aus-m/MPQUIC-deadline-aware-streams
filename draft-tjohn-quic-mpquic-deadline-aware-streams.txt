



QUIC                                                             T. John
Internet-Draft                                               T. Riechard
Intended status: Informational    Otto-von-Guericke University Magdeburg
Expires: 23 August 2025                                 19 February 2025


                   Deadline Aware Streams in MP-QUIC
         draft-tjohn-quic-mpquic-deadline-aware-streams-latest

Abstract

   This document proposes the Deadline-aware Multipath Transport
   Protocol (DMTP) concept as an extension to the Multipath extension of
   QUIC (MP-QUIC).  This extension aims to support data streams with
   strict latency requirements by enabling the signaling of per-stream
   deadlines and by combining multipath scheduling, congestion control
   adaptations, and optional forward error correction (FEC).
   Furthermore, by abstracting the different end-to-end paths available
   in a Path Aware Network (PAN) such as SCION into MP-QUIC's path
   identifiers, we allow an application to select its preferred paths
   while maintaining interoperability with standard MP-QUIC endpoints.
   This new mechanism provides a standardized way for endpoints to
   exchange and schedule deadline-aware streams across multiple network
   paths.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at https://t-aus-
   m.github.io/MPQUIC-deadline-aware-streams/draft-tjohn-quic-mpquic-
   deadline-aware-streams.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-tjohn-quic-
   mpquic-deadline-aware-streams/.

   Discussion of this document takes place on the QUIC mailing list
   (mailto:quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/quic/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/quic/.

   Source for this draft and an issue tracker can be found at
   https://github.com/t-aus-m/MPQUIC-deadline-aware-streams.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 23 August 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Motivation and Applications
   2.  Conventions and Definitions
   3.  Design Overview
     3.1.  Integrating Deadline-Aware Streams into MP-QUIC
       3.1.1.  Minimal Changes to MP-QUIC
       3.1.2.  Path Selection in Path-Aware Networks (PAN)
     3.2.  Deadlines
       3.2.1.  Signalling Deadlines
       3.2.2.  Deadline Semantics
       3.2.3.  Handling Missed Deadline
     3.3.  Adaptive Forward Error Correction (FEC)
     3.4.  Smart Retransmissions
     3.5.  Path Metrics
       3.5.1.  Per Path Delay
       3.5.2.  Gathering Path Metrics
   4.  Extension of Multipath QUIC
     4.1.  Handshake Negotiation and Transport Parameter
     4.2.  DEADLINE_CONTROL Frame
     4.3.  DMTP_ACK Frame
   5.  API
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Multipath Extension of QUIC [MP-QUIC] enhances performance by
   simultaneously utilizing multiple paths between endpoints.  However,
   it currently lacks direct mechanisms to meet per-stream deadline
   requirements, which are increasingly important for real-time
   applications such as teleoperation, live video streaming, and
   interactive gaming.  These applications demand low and bounded
   latency, and can often tolerate partial or no retransmission of late
   data.

   Previous work on deadline-aware protocols for QUIC includes a single-
   path approach, namely Deadline-aware Transport Protocol [QUIC-DTP],
   that introduced per-stream deadlines but did not exploit multipath
   capabilities.  Meanwhile, our conference paper proposing DMTP [DMTP]
   highlighted how taking advantage of multiple paths, combined with
   forward error correction (FEC) and intelligent retransmissions, can
   significantly increase the fraction of packets meeting their
   deadlines, especially over lossy or high-latency links.

   By integrating deadline-aware concepts into MP-QUIC, we seek to
   enable:

   1.  Multipath streams with Deadlines: Scheduling and transmitting
       data across multiple paths, with per-stream deadlines that inform
       scheduling decisions.

   2.  Option for Path-Aware Networking: Abstracting path selection from
       Path-Aware Networks (e.g., [SCION]) by mapping each potential
       path to an MP-QUIC path identifier.

   3.  Deadline-Based Retransmission / FEC: Combining optional adaptive
       FEC (such as [QUIC-AFEC]) and “smart” retransmissions only when
       there is time left to meet the deadline.

   This draft specifies a minimal set of protocol extensions for MP-QUIC
   to exchange deadline information at the transport layer, so that
   endpoints can coordinate scheduling for multipath transmissions with
   strict time constraints.  It allows different implementations to
   interoperate and exchange deadline-aware streams over MP-QUIC.

1.1.  Motivation and Applications

   Real-time applications often produce data blocks (e.g., video frames
   or control messages) that are only valuable if delivered before their
   deadline.  Example use cases include: # TODO: Improve

   *  Teleoperation and Remote Control: Robotic control or telepresence
      systems need deterministic and low latency feedback.  Missing
      control signals or sensor data deadlines can lead to system
      instability or degraded user experience.

   *  Live Streaming and Interactive Media: Latency-sensitive video or
      audio streams (e.g., for live concerts, online VR gaming, cloud
      rendering) benefit from leveraging multiple paths to sustain low-
      latency delivery even under varying network conditions.

   *  Online Gaming: Multiplayer networked games exchange frequent,
      time-critical state updates.  Late updates are effectively wasted,
      so a mechanism to drop or deprioritize old data can save bandwidth
      and improve real-time responsiveness.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Within this document: - "Deadline-aware streams" refers to streams in
   which an application indicates a time by which data must be
   delivered, beyond which data is no longer useful. - "Path" aligns
   with the MP-QUIC concept: each path is identified by a unique Path
   ID, referencing a specific combination of source and destination
   IP:port tuples or multiple distinct end-to-end routes in a path-aware
   network architecture.

3.  Design Overview

3.1.  Integrating Deadline-Aware Streams into MP-QUIC

   The design goal is to extend MP-QUIC with minimal changes.  The
   extensions enable endpoints to signal per-stream deadlines.
   Implementations that support deadline-aware streams MUST implement:

   1.  Path Selection: Select paths for transmitting frames,
       retransmissions and acknowledgements based on metrics relevant to
       meeting deadlines, including:

       *  Path latency measurements

       *  Available bandwidth estimation

       *  Observed packet loss rates

   2.  Packet Scheduling: Implement scheduling algorithms that:

       *  Prioritize packets from streams with earlier deadlines

       *  Account for path characteristics when making scheduling
          decisions

       *  Consider current congestion state of available paths

   3.  Retransmission Control: Implement retransmission policies that:

       *  Evaluate whether retransmitted packets can meet remaining
          deadlines

       *  Skip retransmissions when deadlines cannot be met

       *  Consider path conditions when selecting retransmission paths

   4.  Optional Forward Error Correction: MAY implement FEC mechanisms
       that:

       *  Reduce retransmission overhead for deadline-sensitive streams

       *  Adapt FEC overhead based on path conditions

       *  Apply FEC selectively based on stream requirements (e.g.,
          stream priority)

   5.  Deadline Monitoring: Track deadline status and:

       *  Detect when deadlines cannot be met

       *  Signal deadline misses to the application layer

       *  Allow applications to specify handling of missed deadlines

3.1.1.  Minimal Changes to MP-QUIC

   Our extensions reuse MP-QUIC’s multipath concepts (paths, path IDs,
   path validation, etc.) with only the following additions:

   *  Deadline Transport Parameter: enable_deadline_aware_streams.

   *  Custom Deadline Frame: DEADLINE_CONTROL to specify deadlines for
      streams (see Section 4.2).

   *  Extended Acknowledgement & Scheduling: Slight modifications or
      additions to scheduling logic, path metrics, and congestion
      control so that deadlines can influence decisions.

   *  Optionally: new frames for measuring per-path delay more precisely
      and an acknowledgment variant for real-time feedback (see
      Section 4.3).

   By doing so, we preserve MP-QUIC’s wire format except for newly
   introduced frames and transport parameters, ensuring interoperability
   with multipath-capable endpoints that do not recognize these
   extensions (they will treat unknown frames as errors if negotiated
   incorrectly, or ignore them if permitted).

3.1.2.  Path Selection in Path-Aware Networks (PAN)

   When running over a Path-Aware Network such as [SCION], endpoints may
   discover multiple disjoint or partially disjoint paths.  In SCION, a
   host can receive multiple end-to-end path options from the network.
   We leverage MP-QUIC’s concept of multiple path IDs to represent each
   distinct path from the SCION set.  This means that SCION’s path
   selection is performed outside of MP-QUIC, but MP-QUIC uses the
   resulting IP:port tuples (plus path ID) to treat each route as a
   separate path.  The advantage is that no additional MP-QUIC
   modifications are needed to “support SCION” - we simply map each
   SCION path to a separate MP-QUIC path ID and rely on our new
   deadline-aware logic to decide scheduling and retransmissions.

3.2.  Deadlines

3.2.1.  Signalling Deadlines

   To signal deadlines, endpoints use the DEADLINE_CONTROL frame (see
   Section 4.2).  This frame associates a specific deadline with a
   stream, indicating the relative time by which the data should be
   delivered.

3.2.2.  Deadline Semantics

   *  Deadline Representation: Deadlines are represented as a relative
      time in milliseconds from the time the frame is sent.

   *  Stream Association: A deadline applies to a specific stream
      identified by its Stream ID

   *  Transport Behavior: Upon receiving a DEADLINE_CONTROL frame, the
      transport layer SHOULD attempt to schedule and retransmit packets
      carrying data for the specified stream to meet the indicated
      deadline.

   *  Retransmissions and Scheduling: Endpoints MAY implement custom
      schedulers and congestion controllers optimized for deadline-aware
      traffic, such as those based on DMTP concepts.

3.2.3.  Handling Missed Deadline

   If the transport layer determines that the deadline cannot be met, it
   MAY choose to:

   *  Discard the data associated with the deadline-aware stream.

   *  Inform the application of the missed deadline.

   *  Continue delivering the data if it is still deemed useful.

   The specific behavior is implementation-specific and MAY be
   configurable by the application.

3.3.  Adaptive Forward Error Correction (FEC)

   When deadline constraints are tight and packet losses frequent, FEC
   can reduce the risk of time-consuming retransmissions.  This
   extension optionally uses Adaptive FEC as proposed in [QUIC-AFEC] to
   reduce the need for retransmissions in networks with random losses.
   When using [QUIC-AFEC], the Tag Type of the FEC_Tag MUST be set to 1
   in order for the FEC to work in a [MP-QUIC] environment.  This
   indicates Long Flow Usage which in turn implies that both source
   symbol packets and repair symbol packets MUST contain the FEC_Tag
   frame, which is necessary for matching repair symbol packets to their
   respective source symbol packets after sending them via different
   paths.  FEC Packets SHOULD be sent via another path than the source
   data when multiple paths are available to de-correlate losses.  The
   coding rate is chosen on a per-stream basis. # TODO: Improve clarity

3.4.  Smart Retransmissions

   Smart retransmissions in a deadline-aware context mean that lost
   frames are only retransmitted if there is still enough time left to
   meet the deadline via one or more paths.  The sender computes whether
   the frames can arrive on time, factoring in the path’s estimated one-
   way delay or RTT.  If not, the sender discards the frames rather than
   wasting congestion window or scheduling capacity.

3.5.  Path Metrics

   To schedule traffic effectively, the sender should gather:

   *  One-Way Delays or RTT: For selecting the path(s) that can deliver
      data before the deadline.

   *  Loss Rate: For deciding whether to apply adaptive FEC or more
      aggressive retransmissions.

   *  Available Bandwidth: So that sending on path(s) with insufficient
      capacity does not cause additional delay.

3.5.1.  Per Path Delay

   A crucial metric for DMTP is the one-way or round-trip delay of each
   path.  This is used to decide whether a new or retransmitted packet
   can arrive before its deadline.  In a path-aware network like
   [SCION], the one-way delay might be advertised or inferred from
   routing information.  Otherwise, endpoints measure RTT or one-way
   delay themselves.

   For accurate one-way delay measurements, endpoints MAY use
   synchronized clocks; if full clock sync is not feasible, a fallback
   to round-trip time measurements is still acceptable.  The DMTP_ACK
   frame (see Section 4.3) is introduced primarily for improved delay
   tracking.

3.5.2.  Gathering Path Metrics

   1.  Path-Aware Networks (e.g. SCION) might provide direct metrics,
       such as path latency or bandwidth as part of path metadata.

   2.  Active Probing: If the underlying network does not provide
       metrics, the endpoint MAY send periodic PING frames or small test
       packets along each active path.

   3.  Path Measurement Frames: This draft introduces an optional
       DMTP_ACK frame (Section 4.3) for deeper path measurements,
       including timestamps of packet receipts to estimate per path one-
       way delay.

   4.  Congestion windows, RTT estimates, and packet loss detection from
       MP-QUIC’s standard loss recovery can inform scheduling.

4.  Extension of Multipath QUIC

   This extension builds upon [MP-QUIC].  Below we list the protocol
   additions and modifications.  Unless otherwise noted, all rules of
   MP-QUIC remain.

4.1.  Handshake Negotiation and Transport Parameter

   This extension defines a new transport parameter, used to negotiate
   the use of deadline-aware streams during the connection handshake, as
   specified in [QUIC].  The new transport parameter is defined as
   follows:

   *  enable_deadline_aware_streams (value TBD): A zero-length value
      that, if present, indicates that the endpoint supports deadline-
      aware streams.

   Endpoints negotiate the use of deadline-aware streams by including
   the enable_deadline_aware_streams transport parameter in the
   handshake.  Both endpoints MUST include this transport parameter to
   enable the use of deadline-aware streams.  If an endpoint receives a
   DEADLINE_CONTROL frame without having negotiated support, it MUST
   treat this as a connection error of type PROTOCOL_VIOLATION

4.2.  DEADLINE_CONTROL Frame

   The DEADLINE_CONTROL frame (type=TBD) is used to signal deadline-
   awareness for specific streams and to indicate their associated
   deadlines.

     DEADLINE_CONTROL Frame {
       Type (i) = TBD,
       Stream ID (i),
       Deadline (i),
     }

   The DEADLINE_CONTROL frame contains the following fields:

   Stream ID:  A variable-length integer indicating the Stream ID to
      which the deadline applies.

   Deadline:  A variable-length integer representing the relative
      deadline in milliseconds from the time the frame is sent.  An
      endpoint sends a DEADLINE_CONTROL frame to indicate that data on
      the specified stream should be delivered by the given deadline.
      Upon receiving this frame, the peer MUST attempt to schedule and
      deliver the data on the specified stream within the indicated
      deadline.

   Usage Constraints:

   *  Endpoints MUST NOT send the DEADLINE_CONTROL frame unless both
      endpoints have negotiated support via the
      enable_deadline_aware_streams transport parameter.

   *  If an endpoint receives a DEADLINE_CONTROL frame without having
      negotiated support, it MUST treat it as a connection error of type
      PROTOCOL_VIOLATION.

   *  The DEADLINE_CONTROL frame MUST only be sent in 1-RTT packets.

4.3.  DMTP_ACK Frame

   The DMTP_ACK frame (type=TBD) is used to acknowledge the reception of
   a packet and feedback the reception time to the sender.  If the
   received frame contains a PING (type=0x01) frame, the DMTP_ACK frame
   MUST be sent back on the same path that it was received at.  The
   DMTP_ACK Frame contains the same information as a [QUIC] ACK frame,
   but adds a timestamp to it, in order to communicate if a packet has
   met its deadline or not.

   When using deadline-awareness the receiver SHOULD acknowledge each
   packet separately.

     DMTP_ACK Frame {
      Type (i) = TBD,
      Largest Acknowledged (i),
      ACK Delay (i),
      ACK Range Count (i),
      First ACK Range (i),
      ACK Range (..) ...,
      [ECN Counts (..)],
      Timestamp (i),
     }

   The DMTP_ACK frame adds the Timestamp field to the [QUIC] ACK frame.
   It MUST be formatted according to [RFC3339] with a resolution down to
   the nanosecond, i.e. with 9 digits after the decimal point.  If an
   endpoint uses a clock with a lower resolution, the remaining digits
   SHOULD be padded with zeros.

5.  API

   Though this draft primarily focuses on wire-level protocol changes,
   an implementation that exposes a user-level API might provide:

   *  SetStreamDeadline(stream_id, deadline_ms): Informs the transport
      that data on stream_id must arrive before deadline_ms.

   *  SetStreamPriority(stream_id, priority): Assigns or updates the
      priority for a stream.  Lower numerical priority can indicate
      higher reliability requirement.

   *  OnMissedDeadline(stream_id): (Optional) callback that the
      transport can invoke if data is considered impossible to deliver
      on time.  The application can choose to send new data, discard, or
      do nothing.

   These calls let an application specify deadlines and priorities
   dynamically.

6.  Security Considerations

   This extension retains all the security features and considerations
   of [QUIC], [QUIC-TLS] and [MP-QUIC].  Nevertheless, it introduces
   additional considerations:

   *  Deadline Signaling: Knowledge of deadlines or priorities may be
      sensitive if it reveals application timing patterns or critical
      data intervals.  Implementations SHOULD carefully handle metadata
      (e.g., by encrypting frames in 1-RTT packets).

   *  Resource Exhaustion and Flooding: The ability to manage multiple
      concurrent paths and to schedule or drop data based on deadlines
      must not weaken QUIC’s anti-amplification measures.  Endpoints
      MUST still follow QUIC path validation procedures, ensuring that
      an attacker cannot exploit deadline-aware frames to amplify
      traffic.

   *  When employing DMTP_ACK frames for one-way delay measurement with
      clock synchronization, the clock synchronization must also be
      secured.  Otherwise, an attacker injecting false timestamps could
      mislead scheduling.  Endpoints that rely heavily on these
      measurements should be aware of that risk and possibly cross-check
      with measured RTT or other heuristics.

7.  IANA Considerations

   This document defines a new transport parameter for the negotiation
   of enable multiple paths for QUIC, and two new frame types.  The
   draft defines provisional values for experiments, but we expect IANA
   to allocate short values if the draft is approved.

   The following entry in Table 1 should be added to the "QUIC Transport
   Parameters" registry under the "QUIC Protocol" heading.

         +=======+===============================+===============+
         | Value | Parameter Name.               | Specification |
         +=======+===============================+===============+
         | TBD   | enable_deadline_aware_streams | Section 4.1   |
         +-------+-------------------------------+---------------+

           Table 1: Addition to QUIC Transport Parameters Entries

   The following frame type defined in Table 2 should be added to the
   "QUIC Frame Types" registry under the "QUIC Protocol" heading.

              +=========+==================+===============+
              | Value   | Frame Name       | Specification |
              +=========+==================+===============+
              | TBD (1) | DEADLINE_CONTROL | Section 4.2   |
              +---------+------------------+---------------+
              | TBD (2) | DMTP_ACK         | Section 4.3   |
              +---------+------------------+---------------+

              Table 2: Addition to QUIC Frame Types Entries

8.  References

8.1.  Normative References

   [MP-QUIC]  Liu, Y., Ma, Y., De Coninck, Q., Bonaventure, O., Huitema,
              C., and M. Kühlewind, "Multipath Extension for QUIC", Work
              in Progress, Internet-Draft, draft-ietf-quic-multipath-12,
              22 January 2025, <https://datatracker.ietf.org/doc/html/
              draft-ietf-quic-multipath-12>.

   [QUIC]     Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [QUIC-AFEC]
              Moskvitin, D., Onegin, E., Huang, R., Luo, H., and Q.
              Chen, "Adaptive Forward Erasure Correction for Delay-
              Sensitive QUIC Connections", Work in Progress, Internet-
              Draft, draft-dmoskvitin-quic-adaptive-fec-00, 6 May 2024,
              <https://datatracker.ietf.org/doc/html/draft-dmoskvitin-
              quic-adaptive-fec-00>.

   [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., "Using TLS to Secure
              QUIC", RFC 9001, DOI 10.17487/RFC9001, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9001>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <https://www.rfc-editor.org/rfc/rfc3339>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

8.2.  Informative References

   [DMTP]     John, T., Perrig, A., and D. Hausheer, "DMTP: Deadline-
              aware Multipath Transport Protocol", IEEE, 2023 IFIP
              Networking Conference (IFIP Networking),
              DOI 10.23919/ifipnetworking57963.2023.10186417, June 2023,
              <https://doi.org/10.23919/
              ifipnetworking57963.2023.10186417>.

   [QUIC-DTP] Cui, Y., Ma, C., Shi, H., Zheng, K., and W. Wang,
              "Deadline-aware Transport Protocol", Work in Progress,
              Internet-Draft, draft-shi-quic-dtp-10, 29 July 2024,
              <https://datatracker.ietf.org/doc/html/draft-shi-quic-dtp-
              10>.

   [SCION]    Chuat, L., Legner, M., Basin, D., Hausheer, D., Hitz, S.,
              Müller, P., and A. Perrig, "The Complete Guide to SCION:
              From Design Principles to Formal Verification", Springer
              International Publishing, Information Security
              and Cryptography, DOI 10.1007/978-3-031-05288-0,
              ISBN ["9783031052873", "9783031052880"], 2022,
              <https://doi.org/10.1007/978-3-031-05288-0>.

Acknowledgments

   The authors thank the QUIC working group and the designers of both
   [MP-QUIC] and [QUIC-DTP] for paving the way for deadline-aware
   features in QUIC.  The concept of scheduling data with deadlines over
   multiple paths builds on numerous discussions around partial
   reliability, adaptive FEC, and optimal path selection.

Authors' Addresses

   Tony John
   Otto-von-Guericke University Magdeburg
   Email: tony.john@ovgu.de


   Till-Frederik Riechard
   Otto-von-Guericke University Magdeburg
   Email: riechard@ovgu.de
